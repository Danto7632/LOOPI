name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Build project
      run: |
        cd frontend
        npm run build
      env:
        REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL }}

    # Vercel 프론트엔드 배포
    - name: Deploy Frontend to Vercel
      run: |
        cd frontend
        if [ -n "${{ secrets.VERCEL_TOKEN }}" ]; then
          npx vercel --prod --confirm --token "${{ secrets.VERCEL_TOKEN }}"
          echo "✅ Vercel 프론트엔드 배포 완료!"
        else
          echo "⚠️ VERCEL_TOKEN not set."
          echo "🔧 Vercel 수동 배포 가이드:"
          echo "1. https://vercel.com 방문"
          echo "2. GitHub 계정으로 로그인"
          echo "3. 'Add New Project' 클릭"
          echo "4. LOOPI 리포지토리 선택"
          echo "5. Root Directory를 'frontend'로 설정"
          echo "6. Deploy 클릭"
          echo "📖 자세한 가이드: .github/VERCEL_DEPLOYMENT_GUIDE.md"
        fi
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  deploy-backend:
    name: Deploy Backend to Railway
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: |
        cd backend
        npm ci

    - name: Build project
      run: |
        cd backend
        npm run build

    # Railway 배포 (추천)
    - name: Deploy to Railway
      run: |
        npm install -g @railway/cli
        cd backend
        if [ -n "${{ secrets.RAILWAY_TOKEN }}" ]; then
          railway login --token $RAILWAY_TOKEN
          railway deploy
          echo "✅ Railway 배포 완료!"
        else
          echo "⚠️ RAILWAY_TOKEN not set."
          echo "🔧 Railway 수동 배포 가이드:"
          echo "1. https://railway.app 방문"
          echo "2. GitHub 계정으로 로그인"
          echo "3. 'New Project' 클릭"
          echo "4. 'Deploy from GitHub repo' 선택"
          echo "5. LOOPI 리포지토리의 backend 폴더 선택"
          echo "6. MySQL 서비스 추가"
          echo "📖 자세한 가이드: .github/QUICK_BACKEND_DEPLOY.md"
        fi
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

    # Vercel 백엔드 배포 (대안)
    - name: Deploy Backend to Vercel (Alternative)
      run: |
        cd backend
        if [ -n "${{ secrets.VERCEL_TOKEN }}" ]; then
          npm run build
          npx vercel --prod --confirm --token "${{ secrets.VERCEL_TOKEN }}"
          echo "✅ Vercel 백엔드 배포 완료!"
        else
          echo "⚠️ VERCEL_TOKEN not set."
          echo "🔧 Vercel 백엔드 수동 배포 가이드:"
          echo "1. https://vercel.com 방문"
          echo "2. GitHub 계정으로 로그인"
          echo "3. 'Add New Project' 클릭"
          echo "4. LOOPI 리포지토리의 backend 폴더 선택"
          echo "5. Deploy 클릭"
        fi
      env:
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  # 배포 완료 알림
  notify-deployment:
    name: Notify Deployment Success
    needs: [deploy-frontend, deploy-backend]
    runs-on: ubuntu-latest
    
    steps:
    - name: Deployment Success
      run: |
        echo "🎉 배포가 성공적으로 완료되었습니다!"
        echo "프론트엔드: Vercel"
        echo "백엔드: Railway"